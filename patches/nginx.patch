diff -rupN nginx-1.5.3.old/auto/lib/pcre/make nginx-1.5.3.new/auto/lib/pcre/make
--- nginx-1.5.3.old/auto/lib/pcre/make	2013-07-30 15:27:55.000000000 +0200
+++ nginx-1.5.3.new/auto/lib/pcre/make	2015-06-14 03:06:50.938241207 +0200
@@ -47,11 +47,12 @@ END
 
 $PCRE/pcre.h:	$PCRE/Makefile
 
+#JJJ - add LD and --host=arm for pcre configure
 $PCRE/Makefile:	$NGX_MAKEFILE
 	cd $PCRE \\
 	&& if [ -f Makefile ]; then \$(MAKE) distclean; fi \\
-	&& CC="\$(CC)" CFLAGS="$PCRE_OPT" \\
-	./configure --disable-shared $PCRE_CONF_OPT
+	&& CC="\$(CC)" CCLD="\$(LD)" CFLAGS="$PCRE_OPT" \\
+	./configure --disable-shared --host=arm $PCRE_CONF_OPT
 
 $PCRE/.libs/libpcre.a:	$PCRE/Makefile
 	cd $PCRE \\
diff -rupN nginx-1.5.3.old/conf/nginx.conf nginx-1.5.3.new/conf/nginx.conf
--- nginx-1.5.3.old/conf/nginx.conf	2013-07-30 15:27:55.000000000 +0200
+++ nginx-1.5.3.new/conf/nginx.conf	2015-06-14 03:06:50.942241161 +0200
@@ -1,118 +1,316 @@
 
-#user  nobody;
+user  root;
 worker_processes  1;
 
-#error_log  logs/error.log;
-#error_log  logs/error.log  notice;
-#error_log  logs/error.log  info;
+env PATH;
+env PATH_REDPITAYA;
 
-#pid        logs/nginx.pid;
+error_log  /var/log/redpitaya_nginx/error.log;
+error_log  /var/log/redpitaya_nginx/debug.log  info;
 
+pid        /var/run/redpitaya_nginx.pid;
+
+daemon on;
 
 events {
     worker_connections  1024;
 }
 
+# worker_rlimit_core 500M;
 
 http {
     include       mime.types;
     default_type  application/octet-stream;
 
-    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
-    #                  '$status $body_bytes_sent "$http_referer" '
-    #                  '"$http_user_agent" "$http_x_forwarded_for"';
+    init_by_lua 'cjson = require "cjson"';
+    lua_shared_dict rp_params 10m;
 
-    #access_log  logs/access.log  main;
+    access_log /dev/null;
+    error_log  /var/log/redpitaya_nginx/error.log;
+    error_log  /var/log/redpitaya_nginx/debug.log  info;
 
-    sendfile        on;
-    #tcp_nopush     on;
+    server {
+        listen       80;
 
-    #keepalive_timeout  0;
-    keepalive_timeout  65;
+        keepalive_timeout 0;
 
-    #gzip  on;
+        access_log /dev/null;
+        error_log  /var/log/redpitaya_nginx/error.log;
+        error_log  /var/log/redpitaya_nginx/debug.log  info;
+
+        #gzip on;
+        #gzip_http_version 1.0;
+        #gzip_vary on;
+        #gzip_comp_level 6;
+        #gzip_proxied any;
+        #gzip_types application/json;
+        #gzip_buffers 16 8k; 
+        #gzip_buffers 128 4k;
+        #gzip_disable "MSIE [1-6]\.(?!.*SV1)";
+
+        root /opt/redpitaya/www/apps;
+      
+        location ~ ^/tmp {
+            root /;
+        }
 
-    server {
-        listen       80;
-        server_name  localhost;
+        location ~ ^/log {
+      	    root /var/;
+      	}
+
+        location ~ \.css {
+            add_header 'Access-Control-Allow-Origin' '*';
+            add_header 'Access-Control-Allow-Credentials' 'true';
+            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
+            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
 
-        #charset koi8-r;
+            default_type text/css;
+            add_header  Content-Type    text/css;
+        }
 
-        #access_log  logs/host.access.log  main;
+        location ~ \.js {
+            add_header 'Access-Control-Allow-Origin' '*';
+            add_header 'Access-Control-Allow-Credentials' 'true';
+            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
+            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
 
-        location / {
-            root   html;
-            index  index.html index.htm;
-        }
-
-        #error_page  404              /404.html;
-
-        # redirect server error pages to the static page /50x.html
-        #
-        error_page   500 502 503 504  /50x.html;
-        location = /50x.html {
-            root   html;
-        }
-
-        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
-        #
-        #location ~ \.php$ {
-        #    proxy_pass   http://127.0.0.1;
-        #}
-
-        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
-        #
-        #location ~ \.php$ {
-        #    root           html;
-        #    fastcgi_pass   127.0.0.1:9000;
-        #    fastcgi_index  index.php;
-        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
-        #    include        fastcgi_params;
-        #}
-
-        # deny access to .htaccess files, if Apache's document root
-        # concurs with nginx's one
-        #
-        #location ~ /\.ht {
-        #    deny  all;
-        #}
-    }
+            default_type application/x-javascript;
+            add_header  Content-Type    application/x-javascript;
+        }
+
+        client_body_buffer_size 1M;
+        client_body_temp_path /tmp;
+        rp_bazaar_dir     /opt/redpitaya/www/apps;
+        rp_bazaar_server  http://bazaar.redpitaya.com;
+        rp_tmp_dir        /tmp;
+
+        location /bazaar {
+            add_header 'Access-Control-Allow-Origin' '*';
+            add_header 'Access-Control-Allow-Credentials' 'true';
+            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
+            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
+        
+                 rp_module_cmd;
+        }
+
+        location /data {
+            add_header 'Access-Control-Allow-Origin' '*';
+            add_header 'Access-Control-Allow-Credentials' 'true';
+            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
+            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
+        
+                 rp_module_cmd;
+        }
 
+        location /upload_gen_ch1 {
+             add_header 'Access-Control-Allow-Origin' '*';
+             add_header 'Access-Control-Allow-Credentials' 'true';
+             add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
+             add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
+             add_header 'Content-type' 'text/plain; charset=utf-8';
+
+             content_by_lua '
+                if ngx.req.get_method() == "POST" then
+                   local file = io.open("/tmp/gen_ch1.csv", "w");
+                   ngx.req.read_body();
+                   io.output(file):write(ngx.var.request_body);
+                   io.flush(file);
+                   io.close(file);
+                   ngx.say("OK");
+                else
+                   ngx.say("ERROR: Unsupported request method");
+                end
+             ';
+        }
+
+        location /upload_gen_ch2 {
+             add_header 'Access-Control-Allow-Origin' '*';
+             add_header 'Access-Control-Allow-Credentials' 'true';
+             add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
+             add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
+             add_header 'Content-type' 'text/plain; charset=utf-8';      
+
+             content_by_lua '
+                if ngx.req.get_method() == "POST" then
+                   local file = io.open("/tmp/gen_ch2.csv", "w");
+                   ngx.req.read_body();
+                   io.output(file):write(ngx.var.request_body);
+                   io.flush(file);
+                   io.close(file);
+                   ngx.say("OK");
+                else
+                   ngx.say("ERROR: Unsupported request method");
+                end
+             ';
+        }
 
-    # another virtual host using mix of IP-, name-, and port-based configuration
-    #
-    #server {
-    #    listen       8000;
-    #    listen       somename:8080;
-    #    server_name  somename  alias  another.alias;
-
-    #    location / {
-    #        root   html;
-    #        index  index.html index.htm;
-    #    }
-    #}
-
-
-    # HTTPS server
-    #
-    #server {
-    #    listen       443;
-    #    server_name  localhost;
-
-    #    ssl                  on;
-    #    ssl_certificate      cert.pem;
-    #    ssl_certificate_key  cert.key;
-
-    #    ssl_session_timeout  5m;
-
-    #    ssl_protocols  SSLv2 SSLv3 TLSv1;
-    #    ssl_ciphers  HIGH:!aNULL:!MD5;
-    #    ssl_prefer_server_ciphers   on;
-
-    #    location / {
-    #        root   html;
-    #        index  index.html index.htm;
-    #    }
-    #}
+        location /redpitaya {
+            add_header 'Access-Control-Allow-Origin' '*';
+            add_header 'Access-Control-Allow-Credentials' 'true';
+            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
+            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
+        
+            default_type application/json;
+            content_by_lua '
+                data1 = {}
+                for i=1, 65536 do
+            data1[i] = 0.111 * i
+                end
+                res = ngx.location.capture("/hello");
+                ngx.log(ngx.ERR, res.truncated)
+                json_text = cjson.encode(data1)
+                ngx.say(json_text)
+            ';
+        }
 
+        location /redpitaya/action {
+            add_header 'Access-Control-Allow-Origin' '*';
+            add_header 'Access-Control-Allow-Credentials' 'true';
+            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
+            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
+
+            default_type application/json;
+            content_by_lua '
+                data = {}
+                data.status = 1
+                json_text = cjson.encode(data)
+                ngx.say(json_text)
+            ';
+        }
+
+        location /redpitaya/data {
+            add_header 'Access-Control-Allow-Origin' '*';
+            add_header 'Access-Control-Allow-Credentials' 'true';
+            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
+            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
+
+            default_type application/json;
+            content_by_lua '
+
+                local rp_params = ngx.shared.rp_params;
+                if not rp_params:get("Floats") then
+                    rp_params:set("Floats", "[-1000000, 1000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
+                end
+                
+                params = cjson.decode(rp_params:get("Floats"));
+
+                datasets = {};
+                datasets.g1 = {{}, {}};
+                datasets.params = params;
+
+                datasets.g1[1].data = {};
+                datasets.g1[2].data = {};
+
+                math.randomseed(os.time());
+                for i=1, 2048 do
+                    datasets.g1[1].data[i] = {};
+                    datasets.g1[2].data[i] = {};
+                    datasets.g1[1].data[i][1] = i;
+                    datasets.g1[2].data[i][1] = i;
+                    datasets.g1[1].data[i][2] = math.random(9000, 10000)/1000.0*math.sin(10.0/2048*i + 0.5);
+                    datasets.g1[2].data[i][2] = math.random(4500, 5500)/1000.0*math.sin(10.0/2048*i - 1);
+                end;
+                result = {};
+                result.datasets = datasets;
+                json_text = cjson.encode(result);
+
+                if ngx.req.get_method() == "GET" then    
+                    ngx.say(json_text);
+                elseif ngx.req.get_method() == "POST" then
+                    ngx.req.read_body();
+                    body_table = cjson.decode(ngx.var.request_body);
+                    if body_table and body_table.datasets and body_table.datasets.params then
+                        rp_params:set("Floats", cjson.encode(body_table.datasets.params));
+                        datasets.params = body_table.datasets.params;
+                        ngx.say(cjson.encode(body_table));
+                    else
+                        ngx.say(cjson.encode({"ERROR - wrong POST format"}));
+                    end;
+                else
+                    ngx.say(cjson.encode({"ERROR"}));
+                end;
+            ';
+        }
+
+        location /lic_upload {
+             add_header 'Access-Control-Allow-Origin' '*';
+             add_header 'Access-Control-Allow-Credentials' 'true';
+             add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
+             add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
+             add_header 'Content-type' 'text/plain; charset=utf-8';
+
+             content_by_lua '
+                if ngx.req.get_method() == "POST" then
+                   ngx.req.read_body();
+				   local fname, tmp1 = ngx.var.request_body:find("lic.lic");
+                   local start, tmp1 = ngx.var.request_body:find("{");
+                   local stop, tmp2 = ngx.var.request_body:find("}\\r\\n-");
+                   if fname ~= nil and start ~= nil and stop ~= nil then
+                       local file = io.open("/tmp/lic.lic", "w");
+                       io.output(file):write(ngx.var.request_body:sub(start,stop));
+                       io.flush(file);
+                       io.close(file);
+                       os.execute("bazaar lic 0");
+                       ngx.say("OK");
+                   else
+                       ngx.say("Failed!");
+                   end;
+                   
+                else
+                   ngx.say("ERROR: Unsupported request method");
+                end
+             ';
+        }
+
+        location /redpitaya/data/decimated {
+            add_header 'Access-Control-Allow-Or igin' '*';
+            add_header 'Access-Control-Allow-Credentials' 'true';
+            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
+            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
+
+            default_type application/json;
+            content_by_lua '
+
+                local client_resolution = 1024
+
+                local res = ngx.location.capture("/redpitaya/data");
+                body_table = cjson.decode(res.body);
+                params = body_table.datasets.params;
+                if params[11] and params[12] and params[11] > 0 and params[12] > 0 then
+                    local ch1 = body_table.datasets.g1[1].data;
+                    local ch2 = body_table.datasets.g1[2].data;
+                    
+                    local i=1;
+                    while i <= #ch1 do
+                        if params[11] < ch1[i][1] and params[12] > ch1[i][1] then
+                            i = i + 1
+                        else
+                            table.remove(ch1, i); 
+                            table.remove(ch2, i);       
+                        end
+                    end    
+
+                    local m = math.floor(#ch1 / client_resolution + 0.5)
+
+                    i=1;
+                    local j = m;
+                    while i <= #ch1 do
+                        if j == m then
+                            i = i + 1;
+                        else
+                            table.remove(ch1, i); 
+                            table.remove(ch2, i);       
+                        end
+                        j = j - 1;
+                        if j == 0 then j = m end
+                    end
+
+                    ngx.say(cjson.encode(body_table));
+                else
+                    ngx.say(cjson.encode(body_table));
+                end;
+
+            ';
+        }
+    }
 }
diff -rupN nginx-1.5.3.old/src/core/ngx_log.c nginx-1.5.3.new/src/core/ngx_log.c
--- nginx-1.5.3.old/src/core/ngx_log.c	2013-07-30 15:27:55.000000000 +0200
+++ nginx-1.5.3.new/src/core/ngx_log.c	2015-06-14 03:06:50.946241116 +0200
@@ -343,9 +343,16 @@ ngx_log_init(u_char *prefix)
                                     NGX_FILE_DEFAULT_ACCESS);
 
     if (ngx_log_file.fd == NGX_INVALID_FILE) {
+
+        /* #3099: Be silent about the read only filesystem.
+         *        The error log is routed to /tmp (tmpfs) in nginx.conf.
+         */
+#if 0
         ngx_log_stderr(ngx_errno,
                        "[alert] could not open error log file: "
                        ngx_open_file_n " \"%s\" failed", name);
+#endif
+
 #if (NGX_WIN32)
         ngx_event_log(ngx_errno,
                        "could not open error log file: "
diff -rupN nginx-1.5.3.old/src/http/ngx_http_write_filter_module.c nginx-1.5.3.new/src/http/ngx_http_write_filter_module.c
--- nginx-1.5.3.old/src/http/ngx_http_write_filter_module.c	2013-07-30 15:27:55.000000000 +0200
+++ nginx-1.5.3.new/src/http/ngx_http_write_filter_module.c	2015-06-14 03:06:50.974240799 +0200
@@ -198,8 +198,8 @@ ngx_http_write_filter(ngx_http_request_t
             return NGX_OK;
         }
 
-        ngx_log_error(NGX_LOG_ALERT, c->log, 0,
-                      "the http output chain is empty");
+//        ngx_log_error(NGX_LOG_ALERT, c->log, 0,
+//                      "the http output chain is empty");
 
         ngx_debug_point();
 
diff -rupN nginx-1.5.3.old/src/os/unix/ngx_linux_config.h nginx-1.5.3.new/src/os/unix/ngx_linux_config.h
--- nginx-1.5.3.old/src/os/unix/ngx_linux_config.h	2013-07-30 15:27:55.000000000 +0200
+++ nginx-1.5.3.new/src/os/unix/ngx_linux_config.h	2015-06-14 03:06:50.982240709 +0200
@@ -13,6 +13,8 @@
 #define _GNU_SOURCE             /* pread(), pwrite(), gethostname() */
 #endif
 
+#define NGX_PTR_SIZE 4
+
 #define _FILE_OFFSET_BITS  64
 
 #include <sys/types.h>
