<?xml version="1.0" encoding="utf-8"?>
<MATLABInstrumentDriver>
   <FileVersion>1.0</FileVersion>
   <DriverName>D:\A\matlab\matlab\toolbox\instrument\instrument\drivers\agilent_33120a.mdd</DriverName>
   <DriverType>MATLAB interface object</DriverType>
   <InstrumentType>Function Generator</InstrumentType>
   <InstrumentManufacturer>red_pitaya</InstrumentManufacturer>
   <InstrumentModel>1_1</InstrumentModel>
   <InstrumentVersion>1.0</InstrumentVersion>
   <Identify/>
   <Reset/>
   <Selftest/>
   <Error/>
   <CreateInitCode>
      <Code>function init(obj)
% This method is called after the object is created.
% OBJ is the device object.
% End of function definition - DO NOT EDIT
</Code>
   </CreateInitCode>
   <ConnectInitCode>
      <Type>MCode</Type>
      <Code>function init(obj)
% This method is called after the object is connected.
% OBJ is the device object.
% End of function definition - DO NOT EDIT

%fopen(obj);
</Code>
   </ConnectInitCode>
   <CleanupCode>
      <Type>InstrumentCommand</Type>
   </CleanupCode>
   <GroupInfo>
      <Group>
         <Name>parent</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="parent1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Amplitude</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>VOLTage</ConfigureCommand>
                     <QueryCommand>VOLTage?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <DependentProperty>OutputLoad</DependentProperty>
                  <DependentPropertyValue>50.0</DependentPropertyValue>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="10.0" Min="0.04"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <DependentProperty>OutputLoad</DependentProperty>
                  <DependentPropertyValue>9.9e37</DependentPropertyValue>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="20.0" Min="0.04"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="max" Value="MAX"/>
                     <Enum Name="min" Value="MIN"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>0.100</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Set the output amplitude for the currently active function.

MIN selects the smallest amplitude allowed for the selected function (50 mVpp into 50 ohms)
MAX Selects the largest amplitude allowed (10 Vpp into 50 ohms).

The default amplitude is 100 mVpp(into 50 ohms).

For arbitrary waveforms, the maximum amplitude will be limited if the data do not span the full range of the output DAC (Digital-to-Analog Converter). For example, the built-in "SINC" does not use the full range of value between PLUS OR MINUS 1 and therefore its maximum amplitude is 6.084 (into 50 ohms).

For dc volts, the output level is actually controlled by setting the offset voltage. You can set the dc voltage to any value between PLUS OR MINUS 5 Vdc into 50 ohms or PLUS OR MINUS 10 Vdc into an open circuit.
</Description>
            </Property>
            <Property>
               <Name>AmplitudeOffset</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

%get the interface
g = get(obj,'Interface');

%ask for the value
fprintf(g,'VOLTage:OFFSet?');

%read the value and return it
propertyValue = eval(fscanf(g));</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

%get the interface
g = get(obj,'Interface');

%get the OutputLoad
load = get(obj,'OutputLoad');

if ~ischar(propertyValue);

	switch load
	
		case 50
		
			if (propertyValue &gt; .2) || (propertyValue &lt; -.2)
				error(['For the current OutputLoad setting, accepted ',...
					'values for AmplitudeOffset are ''min'',''max'', ',...
					'or a value from -.2 to .2']);
			else 
				fprintf(g,['VOLTage:OFFSet ',num2str(propertyValue)]);
			end%if/else
		
		case 9.9e37
		
			if (propertyValue &gt; .4) || (propertyValue &lt; -.4)
				error(['For the current OutputLoad setting, accepted ',...
					'values for AmplitudeOffset are ''min'',''max'', ',...
					'or a value from -.4 to .4']);
			else 
				fprintf(g,['VOLTage:OFFSet ',num2str(propertyValue)]);
			end%if/else		
		
		otherwise
			error(['Unexpected value for OutputLoad. Expected ',...
				'50 or 9.9e37']);
		
	end%switch load
	
else
	
	fprintf(g,['VOLTage:OFFSet ',propertyValue]);
	
end%if/else




</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <DependentProperty>OutputLoad</DependentProperty>
                  <DependentPropertyValue>50.0</DependentPropertyValue>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="0.2" Min="-0.2"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <DependentProperty>OutputLoad</DependentProperty>
                  <DependentPropertyValue>9.9e37</DependentPropertyValue>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="0.4" Min="-0.4"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="min" Value="MIN"/>
                     <Enum Name="max" Value="MAX"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>-0.2</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description/>
            </Property>
            <Property>
               <Name>AmplitudeUnits</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>VOLTage:UNIT</ConfigureCommand>
                     <QueryCommand>VOLTage:UNIT?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="vpp" Value="VPP"/>
                     <Enum Name="vrms" Value="VRMS"/>
                     <Enum Name="dbm" Value="DBM"/>
                     <Enum Name="default" Value="DEF"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>vpp</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Select the output unit from amplitude only.

</Description>
            </Property>
            <Property>
               <Name>Catalog</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand/>
                     <QueryCommand>DATA:CATAlog?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>List the names of all waveforms currently downloaded to memory.</Description>
            </Property>
            <Property>
               <Name>Dutycycle</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>PULSE:DCYCLe</ConfigureCommand>
                     <QueryCommand>PULSE:DCYCLe?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="min" Value="MIN"/>
                     <Enum Name="max" Value="MAX"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="80.0" Min="20.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>50</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Set the duty cycle in percent for square waves only.

Duty cycle represents the amount of time per cycle that the square wave is high.

The duty cycle is remembered when you change from square wave to another function. When you return the square wave function, the previous duty cycle is used. The APPly command automatically sets the duty cycle to 50% for square waves.

The duty cycle is automatically adjusted if you select a frequency that is not valid with the percent duty cycle. For example if you set the duty cycle to 70% and then change the frequency to 8MHz, the function generator will automatically adjust the duty cycle to 60% (the upper limit for this frequency).</Description>
            </Property>
            <Property>
               <Name>Frequency</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>FREQuency</ConfigureCommand>
                     <QueryCommand>FREQuency?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="1.5E7" Min="1.0E-4"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="min" Value="MIN"/>
                     <Enum Name="max" Value="Max"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>1.0E-4</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Set the output frequency.

min selects the lowest frequency allowed for currently active function.
max selects the highest frequency allowed for currently active function.

The default frequency is 1 kHz for all functions.

For arbitrary waveforms that you create and download from memory, the maximum frequency depends on the number of points specified in the waveform.

The output frequency is automatically adjusted if you select a function whose maximum frequency is less than that of currently active function. For example, if you output 1 MHz sine wave and then change the function to triangle wave, the function generator will adjust the output to 100 kHz (the upper limit for triangle wave).
</Description>
            </Property>
            <Property>
               <Name>OutputLoad</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>OUTPut:LOAD</ConfigureCommand>
                     <QueryCommand>OUTPut:LOAD?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>50.0</Value>
                     <Value>9.9E37</Value>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="infinity" Value="INF"/>
                     <Enum Name="min" Value="MIN"/>
                     <Enum Name="max" Value="MAX"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>50</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Select the output termination for output amplitude and offset voltage.

The function generator has a fixed output impedance of 50 ohms on the OUTPUT terminal. You can specify whether you are terminating the output into a 50 ohms load or an open circuit. Incorrect impedance matching between the function generator and your load will result in an amplitude or offset which does not match the specified signal level.

INF sets the output termination to "high impedance".
MIN selects 50 ohms.
MAX selects "high impedance".
The default is 50 ohms.

The amplitude (or dc offset) is automatically adjusted (and no error is generated) if you change the output termination. For example, if you set the amplitude to 10 Vpp and then change the termination from 50 ohms to "high impedance", the display impedance will double to 20 Vpp. If you change the "high impedance" to 50 ohms, the displayed amplitude will drop in half.

If you specify 50 ohms but are actually terminating into an open circuit, the displayed output will be twice the value specified. For example, if you set the offset to 100 mVdc (and specify a 50 ohms termination) but are actually terminating output into an open circuit, the actual displayed offset will be 200 mVdc.  
</Description>
            </Property>
            <Property>
               <Name>OutputMode</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>propertyValue = function get(obj, propertyName)
% This function is called to set the group object property value.

% Get interface.
interface = get(obj,'Interface');

% If it is not stantard, it is arbitrary
shape = get(obj,'waveform');

if strcmpi(shape,'USER')
    propertyValue ='arbitrary';
else
    propertyValue ='standard';
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% This function is called to set the device object property value.

</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="arbitrary" Value="aribtrary"/>
                     <Enum Name="standard" Value="standard"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>standard</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description/>
            </Property>
            <Property>
               <Name>OutputSync</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>OUTPut:SYNC</ConfigureCommand>
                     <QueryCommand>OUTPut:SYNC?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="on" Value="1"/>
                     <Enum Name="off" Value="0"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>off</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Enable or disable output SYNC from the terminal.

The default is "ON".

When the SYNC signal is disabled, the output level on the SYNC terminal is indeterminate (it might be a TTL "high" or a TTL "low"). </Description>
            </Property>
            <Property>
               <Name>TriggerSlope</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>TRIGger:SLOPe</ConfigureCommand>
                     <QueryCommand>TRIGger:SLOPe?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="positive" Value="POS"/>
                     <Enum Name="negative" Value="NEG"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>positive</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Select the polarity of the EXT Trig terminal.</Description>
            </Property>
            <Property>
               <Name>TriggerSource</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>TRIGger:SOURce</ConfigureCommand>
                     <QueryCommand>TRIGger:SOURce?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="immediate" Value="IMM"/>
                     <Enum Name="external" Value="EXT"/>
                     <Enum Name="bus" Value="BUS"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>immediate</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Select the source from which the function generator will accept a trigger.</Description>
            </Property>
            <Property>
               <Name>Waveform</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>FUNCtion:SHAPe</ConfigureCommand>
                     <QueryCommand>FUNCtion:SHAPe?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="sin" Value="SIN"/>
                     <Enum Name="square" Value="SQU"/>
                     <Enum Name="ramp" Value="RAMP"/>
                     <Enum Name="noise" Value="NOIS"/>
                     <Enum Name="DC" Value="DC"/>
                     <Enum Name="user" Value="USER"/>
                     <Enum Name="triangle" Value="TRI"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>sin</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Select the output function.

The selected waveform is output using the previously selected frequency, amplitude, and dc offset settings. If you select "USER", the function generator outputs the arbitrary waveform currently selected by the FUNC:USER command.
</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>drivertest</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function varargout = drivertest(obj)
%   AGILENT_33120_MIDTEST01 Code for testing a MATLAB instrument driver.
%
%   This is the machine generated code that tests a MATLAB instrument driver, 
%   
%   The test consists of multiple test steps that can test the MATLAB instrument
%   drivers functions and properties.
%   
%   The test code was generated with the MIDTEST GUI. For more information
%   on MIDTEST, type 'instrhelp midtest' at the MATLAB command prompt.
%   
% 
%   See also ICDEVICE, MIDTEST.
% 
 
%   Creation time: 17-Feb-2004 15:45:53
 

% Wrap entire test in try catch.

try
fprintf('Test: agilent_33120\n');
fprintf(['Start time: ' datestr(now) '\n']);

% Initialize variables.
varargout              = {};
noErrorMsg             = '+0,"No error"';
stepWarningOccurred    = false;
warningOccurred        = false;
errorOccurred          = false;
deviceObj           = obj;


% Test Step 1: reset (Function Test Step)

errorcode = false;
try
    % Execute the function.
    devicereset(deviceObj);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 2: AmplitudeUnits vpp (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'AmplitudeUnits', 'vpp');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'AmplitudeUnits');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'vpp');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: vpp');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 3: AmplitudeUnits vrms (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'AmplitudeUnits', 'vrms');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'AmplitudeUnits');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'vrms');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: vrms');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 4: AmplitudeUnits dbm (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'AmplitudeUnits', 'dbm');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'AmplitudeUnits');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'dbm');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: dbm');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 5: AmplitudeUnits default (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'AmplitudeUnits', 'default');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'AmplitudeUnits');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'vpp');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: vpp');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 6: Catalog get (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    temp = get(deviceObj, 'Catalog');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 7: SETUP - set to square (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Waveform', 'square');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Waveform');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'square');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: square');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 8: Dutycycle min (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Dutycycle', 'min');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Dutycycle');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 20);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 20');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 9: Dutycycle max (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Dutycycle', 'max');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Dutycycle');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 80);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 80');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 10: Dutycycle 20 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Dutycycle', 20.0);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Dutycycle');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 20);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 20');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 11: Dutycycle 40 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Dutycycle', 40.0);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Dutycycle');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 40);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 40');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 12: Dutycycle 60 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Dutycycle', 60.0);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Dutycycle');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 60);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 60');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 13: Dutycycle 80 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Dutycycle', 80.0);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Dutycycle');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 80);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 80');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 14: Dutycycle 50 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Dutycycle', 50.0);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Dutycycle');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 50);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 50');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 15: Frequency min (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Frequency', 'min');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Frequency');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, .0001);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: .0001');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 16: Frequency max (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Frequency', 'max');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Frequency');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 15000000);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 15000000');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 17: Frequency 1e-4 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Frequency', .0001);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Frequency');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, .0001);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: .0001');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 18: Frequency 2E-3 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Frequency', .002);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Frequency');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, .002);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: .002');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 19: Frequency 3E-2 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Frequency', .03);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Frequency');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, .03);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: .03');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 20: Frequency 4e-1 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Frequency', .4);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Frequency');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, .4);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: .4');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 21: Frequency 5 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Frequency', 5);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Frequency');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 5);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 5');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 22: Frequency 60 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Frequency', 60);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Frequency');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 60);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 60');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 23: Frequency 700 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Frequency', 700);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Frequency');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 700);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 700');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 24: Frequency 8000 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Frequency', 8000);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Frequency');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 8000);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 8000');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 25: Frequency 90,000 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Frequency', 90000);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Frequency');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 90000);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 90000');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 26: Frequency 200,000 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Frequency', 200000);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Frequency');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 200000);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 200000');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 27: Frequency 3,000,000 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Frequency', 3000000);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Frequency');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 3000000);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 3000000');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 28: Frequency 15,000,000 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Frequency', 15000000);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Frequency');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 15000000);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 15000000');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 29: Waveform sin (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Waveform', 'sin');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Waveform');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'sin');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: sin');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 30: Waveform square (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Waveform', 'square');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Waveform');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'square');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: square');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 31: Frequency min (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Frequency', 'min');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Frequency');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, .0001);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: .0001');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 32: Waveform sin (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Waveform', 'sin');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Waveform');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'sin');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: sin');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 33: Waveform square (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Waveform', 'square');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Waveform');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'square');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: square');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 34: Waveform ramp (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Waveform', 'ramp');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Waveform');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'ramp');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: ramp');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 35: Waveform triangle (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Waveform', 'triangle');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Waveform');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'triangle');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: triangle');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 36: Waveform noise (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Waveform', 'noise');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Waveform');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'noise');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: noise');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 37: Waveform user (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Waveform', 'user');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Waveform');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'user');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: user');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 38: Waveform DC (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Waveform', 'DC');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Waveform');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'DC');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: DC');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 39: Frequency max (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Frequency', 'max');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Frequency');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 15000000);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 15000000');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 40: Frequency min (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Frequency', 'min');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Frequency');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, .0001);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: .0001');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 41: OutputLoad min (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'OutputLoad', 'min');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'OutputLoad');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 50.0);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 50.0');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 42: OutputLoad max (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'OutputLoad', 'max');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 43: OutputLoad inf (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'OutputLoad', 'infinity');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 44: OutputLoad 50 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'OutputLoad', 50.0);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'OutputLoad');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 50.0);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 50.0');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 45: OutputMode standard (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    temp = get(deviceObj, 'OutputMode');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end
 
% Verify that the queried value matches the expected value.
if (errorcode == false)
    % Compare to the expected value.
    errorcode = ~isequal(temp, 'standard');
    
    % Post information about test step failure.
    if (errorcode == true)
        fprintf('The property is not configured to the expected value.');
    
        % Post actual value.
        if isnumeric(temp)
            fprintf(['Actual value: ' num2str(temp)]);
        else
            fprintf(['Actual value: ' temp]);
        end
    
        % Post expected value.
        fprintf('Expected value: standard');
    end
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 46: Waveform user (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Waveform', 'user');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Waveform');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'user');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: user');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 47: OutputMode arbitrary (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    temp = get(deviceObj, 'OutputMode');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end
 
% Verify that the queried value matches the expected value.
if (errorcode == false)
    % Compare to the expected value.
    errorcode = ~isequal(temp, 'arbitrary');
    
    % Post information about test step failure.
    if (errorcode == true)
        fprintf('The property is not configured to the expected value.');
    
        % Post actual value.
        if isnumeric(temp)
            fprintf(['Actual value: ' num2str(temp)]);
        else
            fprintf(['Actual value: ' temp]);
        end
    
        % Post expected value.
        fprintf('Expected value: arbitrary');
    end
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 48: OutputSync on (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'OutputSync', 'on');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'OutputSync');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'on');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: on');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 49: OutputSync off (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'OutputSync', 'off');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'OutputSync');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'off');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: off');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 50: OutputSync on (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'OutputSync', 'on');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'OutputSync');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'on');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: on');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 51: TriggerSlope pos (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'TriggerSlope', 'positive');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'TriggerSlope');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'positive');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: positive');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 52: TriggerSlope neg (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'TriggerSlope', 'negative');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'TriggerSlope');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'negative');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: negative');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 53: TriggerSource imm (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'TriggerSource', 'immediate');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'TriggerSource');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'immediate');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: immediate');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 54: TriggerSource ext (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'TriggerSource', 'external');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'TriggerSource');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'external');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: external');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 55: TriggerSource bus (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'TriggerSource', 'bus');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'TriggerSource');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'bus');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: bus');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 56: reset (Function Test Step)

errorcode = false;
try
    % Execute the function.
    devicereset(deviceObj);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 57: Set Property (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'TriggerSource', 'bus');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'TriggerSource');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'bus');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: bus');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 58: Burstmod On (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Burstmod');
    groupObj = groupObj(1);
    set(groupObj, 'Enabled', 'on');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Enabled');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'on');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: on');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 59: Trigger (Function Test Step)

errorcode = false;
try
    % Execute the function.
    invoke(deviceObj, 'trigger');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    % Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while executing the function.\n');
        fprintf(result);
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the function.');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 60: Burstmod off (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Burstmod');
    groupObj = groupObj(1);
    set(groupObj, 'Enabled', 'off');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Enabled');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'off');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: off');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 61: AM on (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Amplitudemod');
    groupObj = groupObj(1);
    set(groupObj, 'Enabled', 'on');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Enabled');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'on');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: on');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 62: AM off (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Amplitudemod');
    groupObj = groupObj(1);
    set(groupObj, 'Enabled', 'off');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Enabled');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'off');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: off');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 63: AM on (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Amplitudemod');
    groupObj = groupObj(1);
    set(groupObj, 'Enabled', 'on');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Enabled');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'on');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: on');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 64: AM Depth min (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Amplitudemod');
    groupObj = groupObj(1);
    set(groupObj, 'Depth', 'min');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Depth');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 0);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 0');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 65: AM Depth max (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Amplitudemod');
    groupObj = groupObj(1);
    set(groupObj, 'Depth', 'max');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Depth');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 120);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 120');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 66: AM Depth 0 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Amplitudemod');
    groupObj = groupObj(1);
    set(groupObj, 'Depth', 0);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Depth');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 0);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 0');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 67: AM Depth .25 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Amplitudemod');
    groupObj = groupObj(1);
    set(groupObj, 'Depth', .25);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Depth');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, .25);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: .25');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 68: AM Depth 1 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Amplitudemod');
    groupObj = groupObj(1);
    set(groupObj, 'Depth', 1);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Depth');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 1);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 1');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 69: AM Depth 10 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Amplitudemod');
    groupObj = groupObj(1);
    set(groupObj, 'Depth', 10);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Depth');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 10);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 10');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 70: AM Depth 100 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Amplitudemod');
    groupObj = groupObj(1);
    set(groupObj, 'Depth', 100);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Depth');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 100);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 100');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 71: AM Depth 120 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Amplitudemod');
    groupObj = groupObj(1);
    set(groupObj, 'Depth', 120);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Depth');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 120);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 120');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 72: AM InternalFrequency min (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Amplitudemod');
    groupObj = groupObj(1);
    set(groupObj, 'InternalFrequency', 'min');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'InternalFrequency');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 0.01);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 0.01');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 73: AM InternalFrequency max (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Amplitudemod');
    groupObj = groupObj(1);
    set(groupObj, 'InternalFrequency', 'max');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'InternalFrequency');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 20000);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 20000');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 74: AM InternalFrequency .01 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Amplitudemod');
    groupObj = groupObj(1);
    set(groupObj, 'InternalFrequency', .01);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'InternalFrequency');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 0.01);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 0.01');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 75: AM InternalFrequency. 11 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Amplitudemod');
    groupObj = groupObj(1);
    set(groupObj, 'InternalFrequency', .11);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'InternalFrequency');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, .11);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: .11');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 76: AM InternalFrequency 1.4142 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Amplitudemod');
    groupObj = groupObj(1);
    set(groupObj, 'InternalFrequency', 1.4142);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'InternalFrequency');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 1.4142);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 1.4142');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 77: AM InternalFrequency 21.3 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Amplitudemod');
    groupObj = groupObj(1);
    set(groupObj, 'InternalFrequency', 21.3);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'InternalFrequency');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 21.3);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 21.3');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 78: AM InternalFrequency 356.3 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Amplitudemod');
    groupObj = groupObj(1);
    set(groupObj, 'InternalFrequency', 356.3);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'InternalFrequency');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 356.3);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 356.3');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 79: AM InternalFrequency 3141.59 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Amplitudemod');
    groupObj = groupObj(1);
    set(groupObj, 'InternalFrequency', 3141.59);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'InternalFrequency');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 3141.59);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 3141.59');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 80: AM InternalFrequency 20000 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Amplitudemod');
    groupObj = groupObj(1);
    set(groupObj, 'InternalFrequency', 20000);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'InternalFrequency');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 20000);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 20000');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 81: AM InternalWaveform All (Set Property Test Step)

errorcode = false;

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the InternalWaveform property.
validValues = {'sin', 'square', 'triangle', 'ramp', 'noise', 'user'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Amplitudemod');
        groupObj = groupObj(1);
        set(groupObj, 'InternalWaveform', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.');
            fprintf(result);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, 'InternalWaveform');

            % Compare to the expected value.
            errorcode = ~isequal(tempOut, validValues{i});
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.');
    
                % Post actual value.
                if isnumeric(tempOut)
                    fprintf(['Actual value: ' num2str(tempOut)]);
                else
                    fprintf(['Actual value: ' tempOut]);
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i})]);
                else
                    fprintf(['Expected value: ' validValues{i}]);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.');
                fprintf(result);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.');
        fprintf(lasterr);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 82: AM Source all (Set Property Test Step)

errorcode = false;

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Source property.
validValues = {'both', 'external'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Amplitudemod');
        groupObj = groupObj(1);
        set(groupObj, 'Source', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.');
            fprintf(result);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, 'Source');

            % Compare to the expected value.
            errorcode = ~isequal(tempOut, validValues{i});
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.');
    
                % Post actual value.
                if isnumeric(tempOut)
                    fprintf(['Actual value: ' num2str(tempOut)]);
                else
                    fprintf(['Actual value: ' tempOut]);
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i})]);
                else
                    fprintf(['Expected value: ' validValues{i}]);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.');
                fprintf(result);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.');
        fprintf(lasterr);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 83: AM off (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Amplitudemod');
    groupObj = groupObj(1);
    set(groupObj, 'Enabled', 'off');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Enabled');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'off');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: off');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 84: AWF on (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Waveform', 'user');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Waveform');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'user');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: user');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 85: AWF CrestFactor (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    groupObj = get(deviceObj, 'Arbitrarywaveform');
    groupObj = groupObj(1);
    temp = get(groupObj, 'CrestFactor');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 86: AWF CurrentWaveformName (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    groupObj = get(deviceObj, 'Arbitrarywaveform');
    groupObj = groupObj(1);
    temp = get(groupObj, 'CurrentWaveformName');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 87: AWF MaxNumberWaveforms (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    groupObj = get(deviceObj, 'Arbitrarywaveform');
    groupObj = groupObj(1);
    temp = get(groupObj, 'MaxNumberWaveform');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end
 
% Verify that the queried value matches the expected value.
if (errorcode == false)
    % Compare to the expected value.
    errorcode = ~isequal(temp, 9);
    
    % Post information about test step failure.
    if (errorcode == true)
        fprintf('The property is not configured to the expected value.');
    
        % Post actual value.
        if isnumeric(temp)
            fprintf(['Actual value: ' num2str(temp)]);
        else
            fprintf(['Actual value: ' temp]);
        end
    
        % Post expected value.
        fprintf('Expected value: 9');
    end
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 88: AWF Offset min (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Arbitrarywaveform');
    groupObj = groupObj(1);
    set(groupObj, 'Offset', 'min');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Offset');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, -0.2);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: -0.2');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 89: AWF Offset  max (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Arbitrarywaveform');
    groupObj = groupObj(1);
    set(groupObj, 'Offset', 'max');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Offset');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, .2);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: .2');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 90: AWF Offset -.15 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Arbitrarywaveform');
    groupObj = groupObj(1);
    set(groupObj, 'Offset', -0.15);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Offset');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, -.15);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: -.15');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 91: AWF Offset -.1 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Arbitrarywaveform');
    groupObj = groupObj(1);
    set(groupObj, 'Offset', -0.1);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Offset');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, -.1);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: -.1');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 92: AWF Offset -.05 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Arbitrarywaveform');
    groupObj = groupObj(1);
    set(groupObj, 'Offset', -0.05);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Offset');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, -.05);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: -.05');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 93: AWF Offset 0 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Arbitrarywaveform');
    groupObj = groupObj(1);
    set(groupObj, 'Offset', 0.0);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Offset');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 0);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 0');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 94: AWF Offset .05 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Arbitrarywaveform');
    groupObj = groupObj(1);
    set(groupObj, 'Offset', 0.05);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Offset');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, .05);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: .05');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 95: AWF Offset .1 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Arbitrarywaveform');
    groupObj = groupObj(1);
    set(groupObj, 'Offset', 0.1);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Offset');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, .1);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: .1');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 96: AWF Offset .15 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Arbitrarywaveform');
    groupObj = groupObj(1);
    set(groupObj, 'Offset', 0.15);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Offset');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, .15);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: .15');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 97: AWF Offset .2 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Arbitrarywaveform');
    groupObj = groupObj(1);
    set(groupObj, 'Offset', 0.2);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Offset');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, .2);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: .2');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 113: AWF WaveformLengthMax (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    groupObj = get(deviceObj, 'Arbitrarywaveform');
    groupObj = groupObj(1);
    temp = get(groupObj, 'WaveformLengthMax');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end
 
% Verify that the queried value matches the expected value.
if (errorcode == false)
    % Compare to the expected value.
    errorcode = ~isequal(temp, 16000);
    
    % Post information about test step failure.
    if (errorcode == true)
        fprintf('The property is not configured to the expected value.');
    
        % Post actual value.
        if isnumeric(temp)
            fprintf(['Actual value: ' num2str(temp)]);
        else
            fprintf(['Actual value: ' temp]);
        end
    
        % Post expected value.
        fprintf('Expected value: 16000');
    end
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 114: AWF WaveformLengthMin (Get Property Test Step)

errorcode = false;
try
    % Query the property.
    groupObj = get(deviceObj, 'Arbitrarywaveform');
    groupObj = groupObj(1);
    temp = get(groupObj, 'WaveformLengthMin');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while getting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end
 
% Verify that the queried value matches the expected value.
if (errorcode == false)
    % Compare to the expected value.
    errorcode = ~isequal(temp, 8);
    
    % Post information about test step failure.
    if (errorcode == true)
        fprintf('The property is not configured to the expected value.');
    
        % Post actual value.
        if isnumeric(temp)
            fprintf(['Actual value: ' num2str(temp)]);
        else
            fprintf(['Actual value: ' temp]);
        end
    
        % Post expected value.
        fprintf('Expected value: 8');
    end
end

% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 115: clear (Function Test Step)

% This test step generated no code. Most likely because a
% property or function to test was not selected.
fprintf('Test step status: PASSED\n');

% Test Step 116: SETUP - Waveform Sin (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Waveform', 'sin');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Waveform');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'sin');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: sin');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 117: SETUP - freq 1000 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    set(deviceObj, 'Frequency', 1000.0);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(deviceObj, 'Frequency');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 1000);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 1000');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 118: Burstmod On (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Burstmod');
    groupObj = groupObj(1);
    set(groupObj, 'Enabled', 'on');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Enabled');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 'on');
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: on');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 119: BM Cycles min (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Burstmod');
    groupObj = groupObj(1);
    set(groupObj, 'Cycles', 'min');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Cycles');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 1);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 1');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 120: BM Cycles max (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Burstmod');
    groupObj = groupObj(1);
    set(groupObj, 'Cycles', 'max');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Cycles');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 50000);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 50000');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 121: BM Cycles inf (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Burstmod');
    groupObj = groupObj(1);
    set(groupObj, 'Cycles', 'infinity');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 122: BM Cycles 1 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Burstmod');
    groupObj = groupObj(1);
    set(groupObj, 'Cycles', 1.0);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Cycles');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 1);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 1');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 123: BM Cycles 21 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Burstmod');
    groupObj = groupObj(1);
    set(groupObj, 'Cycles', 21.0);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Cycles');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 21);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 21');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 124: BM Cycles 361 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Burstmod');
    groupObj = groupObj(1);
    set(groupObj, 'Cycles', 361.0);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Cycles');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 361);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 361');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 125: BM Cycles 4172 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Burstmod');
    groupObj = groupObj(1);
    set(groupObj, 'Cycles', 4172.0);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Cycles');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 4172);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 4172');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 126: BM Cycles 50000 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Burstmod');
    groupObj = groupObj(1);
    set(groupObj, 'Cycles', 50000.0);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Cycles');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 50000);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 50000');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 127: BM InternalRate min (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Burstmod');
    groupObj = groupObj(1);
    set(groupObj, 'InternalRate', 'min');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'InternalRate');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 0.01);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 0.01');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 128: BM InternalRate max (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Burstmod');
    groupObj = groupObj(1);
    set(groupObj, 'InternalRate', 'max');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'InternalRate');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 50000);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 50000');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 129: BM InternalRate .01 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Burstmod');
    groupObj = groupObj(1);
    set(groupObj, 'InternalRate', 0.01);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'InternalRate');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 0.01);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 0.01');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 130: BM InternalRate 50000 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Burstmod');
    groupObj = groupObj(1);
    set(groupObj, 'InternalRate', 50000.0);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'InternalRate');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 50000);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 50000');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 131: BM Phase min (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Burstmod');
    groupObj = groupObj(1);
    set(groupObj, 'Phase', 'min');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Phase');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, -360.0);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: -360.0');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 132: BM Phase max (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Burstmod');
    groupObj = groupObj(1);
    set(groupObj, 'Phase', 'max');
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Phase');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 360.0);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 360.0');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 133: BM Phase -360 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Burstmod');
    groupObj = groupObj(1);
    set(groupObj, 'Phase', -360.0);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Phase');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, -360);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: -360');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 134: BM Phase -180 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Burstmod');
    groupObj = groupObj(1);
    set(groupObj, 'Phase', -180.0);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Phase');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, -180);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: -180');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 135: BM Phase -92 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Burstmod');
    groupObj = groupObj(1);
    set(groupObj, 'Phase', -92.0);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Phase');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, -92);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: -92');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 136: BM Phase 45.4 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Burstmod');
    groupObj = groupObj(1);
    set(groupObj, 'Phase', 45.4);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Phase');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 45.4);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 45.4');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 137: BM Phase 360 (Set Property Test Step)

errorcode = false;

try
    % Configure the property.
    groupObj = get(deviceObj, 'Burstmod');
    groupObj = groupObj(1);
    set(groupObj, 'Phase', 360.0);
 
    % Check if instrument error occurred.
    result = geterror(deviceObj);
    errorcode = ~strcmpi(result, noErrorMsg);
    
    
% Post information about error if one occurred.
    if (errorcode == true)
        fprintf('An instrument error occurred while setting the property value.\n');
        fprintf([result '\n']);
    end

    % Verify that the configured value matches the expected value.
    if (errorcode == false)
        % Get the current property value.
        currentValue = get(groupObj, 'Phase');
    
        % Compare to the expected value.
        errorcode = ~isequal(currentValue, 360);
    
        % Post information about test step failure.
        if (errorcode == true)
            fprintf('The property is not configured to the expected value.');
    
            % Post actual value.
            if isnumeric(currentValue)
                fprintf(['Actual value: ' num2str(currentValue)]);
            else
                fprintf(['Actual value: ' currentValue]);
            end
    
            % Post expected value.
            fprintf('Expected value: 360');
        end
 
        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode1 = ~strcmpi(result, noErrorMsg);
    
        % Post information about error if one occurred.
        if (errorcode1 == true)
            errorcode = errorcode1;
            fprintf('An instrument error occurred while getting the property value.');
            fprintf(result);
        end
    end
catch
    % A MATLAB error occurred.
    errorcode = true;

    % Post information about error.
    fprintf('A MATLAB error occurred while testing the property.\n');
    fprintf(lasterr);
end


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Test Step 138: BM Source All (Set Property Test Step)

errorcode = false;

% Overall error status for all settings.
finalerrorcode = false;

% Valid values for the Source property.
validValues = {'external', 'internal'};

% Test all supported values.
for i = 1:length(validValues)
    try
        % Configure the property.
        groupObj = get(deviceObj, 'Burstmod');
        groupObj = groupObj(1);
        set(groupObj, 'Source', validValues{i});

        % Check if instrument error occurred.
        result = geterror(deviceObj);
        errorcode = ~strcmp(result, noErrorMsg);

        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while setting the property value.');
            fprintf(result);
        end

        % Verify that the configured value matches the expected value.
        if (errorcode == false)
            % Get the current property value.
            tempOut = get(groupObj, 'Source');

            % Compare to the expected value.
            errorcode = ~isequal(tempOut, validValues{i});
    
            % Post information about test step failure.
            if (errorcode == true)
                fprintf('The property is not configured to the expected value.');
    
                % Post actual value.
                if isnumeric(tempOut)
                    fprintf(['Actual value: ' num2str(tempOut)]);
                else
                    fprintf(['Actual value: ' tempOut]);
                end
    
                % Post expected value.
                if isnumeric(validValues{i})
                    fprintf(['Expected value: ' num2str(validValues{i})]);
                else
                    fprintf(['Expected value: ' validValues{i}]);
                end
            end

            % Check if instrument error occurred.
            result = geterror(deviceObj);
            errorcode1 = ~strcmp(result, noErrorMsg);

            % Post information about error if one occurred.
            if (errorcode1 == true)
                errorcode = errorcode1;
                fprintf('An instrument error occurred while getting the property value.');
                fprintf(result);
            end
        end
    catch
        % A MATLAB error occurred.
        errorcode = true;

        % Post information about error.
        fprintf('A MATLAB error occurred while testing the property.');
        fprintf(lasterr);
    end
    if (errorcode == true)
        finalerrorcode = true;
    end
end
errorcode = finalerrorcode;


% Post message indicating if test step passed.
if (errorcode == true)
    errorOccurred = true;
    fprintf('Test step status: FAILED\n');
elseif (stepWarningOccurred == true)
    fprintf('Test step status: PASSED with warnings\n');
else
    fprintf('Test step status: PASSED\n');
end

% Cleanup.

% Post results.
fprintf(['Stop time: ' datestr(now) '\n']);
if (errorOccurred == true)
    fprintf('Test status: FAILED\n');
    varargout{1} = false;
elseif (warningOccurred == true)
    fprintf('Test status: PASSED with warnings\n');
    varargout{1} = true;
else
    fprintf('Test status: PASSED\n');
    varargout{1} = true;
end

catch
    % An error occurred while running the test.
    fprintf('An error occurred while executing the test.\n');
    fprintf(lasterr);
    varargout{1} = false;
end</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>trigger</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <Line Command="*TRG" Output="false"/>
                  </Commands>
               </Code>
               <Description>TRIGGER Send a software trigger to the instrument.

INVOKE(OBJ, 'trigger') sends a software trigger to the instrument.
</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>arbitrarywaveformch1</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ArbitrarywaveformCH11" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>state</Name>
               <Location>arbitrarywaveformch1</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
parent = get(obj,'parent');

%Get interface
interface = get(parent,'interface');

% Error checking.
if ~ischar(propertyValue)
    error('state must be a string.');
end

fprintf(interface, ['OUTPUT1:STATE' propertyValue '']);
propertyName = 1;</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description/>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Amplitude</Name>
               <Location>arbitrarywaveformch1</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Amplitude(obj, gain)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.
%get parent
parent = get(obj,'parent');

%Get interface
interface = get(parent,'interface');

% Error checking.
if ~ischar(gain)
    error('state must be a string.');
end

fprintf(interface, ['SOUR1:VOLT ' gain '']);</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>customForm</Name>
               <Location>arbitrarywaveformch1</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function DustomForm(obj, data1)
parent = get(obj,'parent');
interface = get(parent,'interface');

fprintf(interface,['SOUR1:TRAC:DATA:DATA ' data1 '' ]);
</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>DutyCycle</Name>
               <Location>arbitrarywaveformch1</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function DutyCycle(obj,dutycycle)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.
%get parent
parent = get(obj,'parent');

%Get interface
interface = get(parent,'interface');

% Error checking.
if ~ischar(dutycycle)
    error('state must be a string.');
end

fprintf(interface, ['SOUR1:DCYC ' dutycycle '']);</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>enable</Name>
               <Location>arbitrarywaveformch1</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Enable(obj,state)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.
%get parent
parent = get(obj,'parent');

%Get interface
interface = get(parent,'interface');

% Error checking.
if ~ischar(state)
    error('state must be a string.');
end

fprintf(interface, ['OUTPUT1:STATE ' state '']);</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>frequency</Name>
               <Location>arbitrarywaveformch1</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Frequency(obj, frequency)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.
%get parent
parent = get(obj,'parent');

%Get interface
interface = get(parent,'interface');

% Error checking.
if ~ischar(frequency)
    error('state must be a string.');
end

fprintf(interface, ['SOUR1:FREQ:FIX ' frequency '']);</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>offset</Name>
               <Location>arbitrarywaveformch1</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function offset(obj, off)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.
%get parent
parent = get(obj,'parent');

%Get interface
interface = get(parent,'interface');

% Error checking.
if ~ischar(off)
    error('state must be a string.');
end

fprintf(interface, ['SOUR1:VOLT:OFFS ' off '']);</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>phase</Name>
               <Location>arbitrarywaveformch1</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function phase(obj, phase)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.
%get parent
parent = get(obj,'parent');

%Get interface
interface = get(parent,'interface');

% Error checking.
if ~ischar(phase)
    error('state must be a string.');
end

fprintf(interface, ['SOUR1:PHAS ' phase '']);</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>waveform</Name>
               <Location>arbitrarywaveformch1</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function waveform(obj, waveform)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.
%get parent
parent = get(obj,'parent');

%Get interface
interface = get(parent,'interface');

% Error checking.
if ~ischar(waveform)
    error('state must be a string.');
end

fprintf(interface, ['SOUR1:FUNC ' waveform '']);</MCode>
               </Code>
               <Description/>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>arbitrarywaveformch2</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ArbitrarywaveformCH21" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>Amplitude</Name>
               <Location>arbitrarywaveformch2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Amplitude(obj, gain)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.
%get parent
parent = get(obj,'parent');

%Get interface
interface = get(parent,'interface');

% Error checking.
if ~ischar(gain)
    error('state must be a string.');
end

fprintf(interface, ['SOUR2:VOLT ' gain '']);</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>CustomForm</Name>
               <Location>arbitrarywaveformch2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function DustomForm(obj, data1)
parent = get(obj,'parent');
interface = get(parent,'interface');
fprintf(interface,['SOUR2:TRAC:DATA:DATA ' data1 '' ]);
</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>DutyCycle</Name>
               <Location>arbitrarywaveformch2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function DutyCycle(obj,dutycycle)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.
%get parent
parent = get(obj,'parent');

%Get interface
interface = get(parent,'interface');

% Error checking.
if ~ischar(dutycycle)
    error('state must be a string.');
end

fprintf(interface, ['SOUR2:DCYC ' dutycycle '']);</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>Enable</Name>
               <Location>arbitrarywaveformch2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Enable(obj,state)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.
%get parent
parent = get(obj,'parent');

%Get interface
interface = get(parent,'interface');

% Error checking.
if ~ischar(state)
    error('state must be a string.');
end

fprintf(interface, ['OUTPUT2:STATE ' state '']);</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>Frequency</Name>
               <Location>arbitrarywaveformch2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Frequency(obj, frequency)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.
%get parent
parent = get(obj,'parent');

%Get interface
interface = get(parent,'interface');

% Error checking.
if ~ischar(frequency)
    error('state must be a string.');
end

fprintf(interface, ['SOUR2:FREQ:FIX ' frequency '']);</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>Offset</Name>
               <Location>arbitrarywaveformch2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Offset(obj, off)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.
%get parent
parent = get(obj,'parent');

%Get interface
interface = get(parent,'interface');

% Error checking.
if ~ischar(off)
    error('state must be a string.');
end

fprintf(interface, ['SOUR2:VOLT:OFFS ' off '']);</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>Phase</Name>
               <Location>arbitrarywaveformch2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Phase(obj, phase)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.
%get parent
parent = get(obj,'parent');

%Get interface
interface = get(parent,'interface');

% Error checking.
if ~ischar(phase)
    error('state must be a string.');
end

fprintf(interface, ['SOUR2:PHAS ' phase '']);</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>Waveform</Name>
               <Location>arbitrarywaveformch2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Waveform(obj, waveform)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.
%get parent
parent = get(obj,'parent');

%Get interface
interface = get(parent,'interface');

% Error checking.
if ~ischar(waveform)
    error('state must be a string.');
end

fprintf(interface, ['SOUR2:FUNC ' waveform '']);</MCode>
               </Code>
               <Description/>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>burstmod</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="BurstMod1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Cycles</Name>
               <Location>burstmod</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>BM:NCYCles</ConfigureCommand>
                     <QueryCommand>BM:NCYCles?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="50000.0" Min="1.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="min" Value="MIN"/>
                     <Enum Name="max" Value="MAX"/>
                     <Enum Name="infinity" Value="INF"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>1</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Set the number of cycles to be output per burst( Trigger burst mode only).

Select from one cycle to 50 000 cycles, in 1 cycles increments. The default is 1 cycle.
</Description>
            </Property>
            <Property>
               <Name>Enabled</Name>
               <Location>burstmod</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>BM:STATe</ConfigureCommand>
                     <QueryCommand>BM:STATe?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="on" Value="1"/>
                     <Enum Name="off" Value="0"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>on</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Enable or disable burst modulation. 

To ensure proper operation, you should enable the burst mode after you have set other modulation parameters. Only one modulation mode can be enabled at a time.
When you enable the burst mode, the previous modulation mode is turned off.
</Description>
            </Property>
            <Property>
               <Name>InternalRate</Name>
               <Location>burstmod</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>BM:INTernal:Rate</ConfigureCommand>
                     <QueryCommand>BM:INTernal:Rate?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="50000.0" Min="0.01"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="min" Value="MIN"/>
                     <Enum Name="max" Value="MAX"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>0.01</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Set the burst rate for internally triggered bursts.

The burst rate frequency defines the interval between bursts. Select from 10 mHz to 50 kHz. The default is 100 Hz.

The burst rate is used only when internal triggering is enables. The burst rate is ignored when single triggering or external triggering is enabled.

It is possible to specify a burst rate that is too fast for the function generator to output with the specified carrier frequency and burst count. If the burst rate is too high, the function generator will internally adjust it as needed to continuously re-trigger the burst. The adjustment is handled internally by the function generator.
</Description>
            </Property>
            <Property>
               <Name>Phase</Name>
               <Location>burstmod</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>BM:PHASe</ConfigureCommand>
                     <QueryCommand>BM:PHASe?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="360.0" Min="-360.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="min" Value="MIN"/>
                     <Enum Name="max" Value="MAX"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Set the starting phase for the burst (Trigger burst mode only).

Select from -360 degrees to +360, in .001 degree increments. The default is 0 degrees.
</Description>
            </Property>
            <Property>
               <Name>Source</Name>
               <Location>burstmod</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>BM:SOURCe</ConfigureCommand>
                     <QueryCommand>BM:SOURCe?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="external" Value="EXT"/>
                     <Enum Name="internal" Value="INT"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>external</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Select the burst modulation source.

In the external gated burst mode, the output waveform is either "on" or "off" based on the level of the external signal applied to the rear panel.

When the internal burst source is selected, the external gated mode is disabled.

When the external gate source is selected, the output is enabled or disabled based on the logic level of the gate signal applied to the EXT TRIG terminal. The default is INT.

When external gate source is selected, the burst count, burst rate, burst phase, and burst trigger are ignored (these parameters are used only for burst mode).</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>burstmodch1</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="BurstCH11" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>BurstCount</Name>
               <Location>burstmodch1</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function BurstCount(obj, val)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.
%get parent
parent = get(obj,'parent');

%Get interface
interface = get(parent,'interface');

% Error checking.
if ~ischar(val)
    error('state must be a string.');
end

fprintf(interface, ['SOUR1:BURS:NOR ' val '']);</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>Cycles</Name>
               <Location>burstmodch1</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Cycles(obj, val)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.
%get parent
parent = get(obj,'parent');

%Get interface
interface = get(parent,'interface');

% Error checking.
if ~ischar(val)
    error('state must be a string.');
end

fprintf(interface, ['SOUR1:BURS:NCYC ' val '']);</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>Enabled</Name>
               <Location>burstmodch1</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Cycles(obj, val)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.
%get parent
parent = get(obj,'parent');

%Get interface
interface = get(parent,'interface');

% Error checking.
if ~ischar(val)
    error('state must be a string.');
end

fprintf(interface, ['SOUR1:BURS:STAT ' val '']);</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>InternalPeriod</Name>
               <Location>burstmodch1</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function InternalPeriod(obj,val)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.
%get parent
parent = get(obj,'parent');

%Get interface
interface = get(parent,'interface');

% Error checking.
if ~ischar(val)
    error('state must be a string.');
end

fprintf(interface, ['SOUR1:BURS:INT:PER ' val '']);</MCode>
               </Code>
               <Description/>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>burstmodch2</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Burstmodch21" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>BurstCount</Name>
               <Location>burstmodch2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function BurstCount(obj, val)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.
%get parent
parent = get(obj,'parent');

%Get interface
interface = get(parent,'interface');

% Error checking.
if ~ischar(val)
    error('state must be a string.');
end

fprintf(interface, ['SOUR2:BURS:NOR ' val '']);</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>Cycles</Name>
               <Location>burstmodch2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Cycles(obj, val)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.
%get parent
parent = get(obj,'parent');

%Get interface
interface = get(parent,'interface');

% Error checking.
if ~ischar(val)
    error('state must be a string.');
end

fprintf(interface, ['SOUR2:BURS:NCYC ' val '']);</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>Enabled</Name>
               <Location>burstmodch2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Cycles(obj, val)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.
%get parent
parent = get(obj,'parent');

%Get interface
interface = get(parent,'interface');

% Error checking.
if ~ischar(val)
    error('state must be a string.');
end

fprintf(interface, ['SOUR2:BURS:STAT ' val '']);</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>InternalPeriod</Name>
               <Location>burstmodch2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function IntrnalPeriod(obj,val)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.
%get parent
parent = get(obj,'parent');

%Get interface
interface = get(parent,'interface');

% Error checking.
if ~ischar(val)
    error('state must be a string.');
end

fprintf(interface, ['SOUR2:BURS:INT:PER ' val '']);</MCode>
               </Code>
               <Description/>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>calibration</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Calibration1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Count</Name>
               <Location>calibration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand/>
                     <QueryCommand>CALibration:Count?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Query the function generator to determine the number of times it has been calibrated.</Description>
            </Property>
            <Property>
               <Name>Enabled</Name>
               <Location>calibration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand/>
                     <QueryCommand>CALibration:Secure:State?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="on" Value="1"/>
                     <Enum Name="off" Value="0"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>on</DefaultValue>
               <ReadOnly>while open</ReadOnly>
               <Description>Query the secured state of the funtion generator.</Description>
            </Property>
            <Property>
               <Name>Message</Name>
               <Location>calibration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

% Get interface
interface = get(get(obj,'parent'),'interface');

% Get the string
fprintf(interface,'CALibration:STRing?')

% Return it
propertyValue = fscanf(interface);
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.



% Error checking.
if ~ischar(propertyValue)
    error('MESSAGE must be a string.');
end

% Get interface.
interface = get(get(obj,'parent'),'interface');

% Write the command to instrument.
fprintf(interface, ['CALibration:STRing "' propertyValue '"']);


</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Record calibration information about the function generator.</Description>
            </Property>
            <Property>
               <Name>Setup</Name>
               <Location>calibration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>CALibration:SETup</ConfigureCommand>
                     <QueryCommand>CALibration:SETup?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="84.0" Min="0.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Configure the function generator's internal state for each of the calibration steps to be performed.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>securedevice</Name>
               <Location>calibration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function securedevice(obj, calibrationCode, state)
% OBJ is the device object.
% code is the code to secure the instrument

%Get parent of object
parent = get(obj,'parent');

% Get interface.
interface = get(parent,'Interface');

% Parse inputs.
switch (nargin)
case 1
    error('CALIBRATIONCODE must be specified.');
case 2
    fprintf(interface,'CALibration:SECure:STATe?');
    currentState = fscanf(interface, '%g');
case 3
    % STATE can either be 'secure' or 'unsecure'.
    if ~any(strcmpi(state, {'secure', 'unsecure'}))
        error('STATE must be either ''secure'' or ''unsecure''.');
    end
   
    % Translating State into the expected current state numeric value.
    if strcmpi(state, 'secure')
        currentState = 0;
    else
        currentState = 1;
    end
otherwise
    error('Too many input arguments.');
end

% Error checking.
if ~ischar(calibrationCode)
    error('CALIBRATIONCODE must be a string.');
end

% Unsecure or secure the instrument.
switch (currentState)
case 0
    % Secure.
    fprintf(interface,['CALibration:SECure:STATe ON, ' calibrationCode]);   
case 1
    % Unsecure.
    fprintf(interface,['CALibration:SECure:STATe OFF , ' calibrationCode]);
end
      
</MCode>
               </Code>
               <Description>SECUREDEVICE secure or unsecure the power supply for calibration

INVOKE(OBJ, 'securedevice','code','secure') to 'secure' the device after the calibration process.

INVOKE(OBJ, 'securedevice','code','unsecure') to ‘unsecure’ the device before calibration.



</Description>
            </Method>
            <Method>
               <Name>setsecurecode</Name>
               <Location>calibration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setsecurecode(obj,secureCode)
% OBJ is the device object.
% SecureCode is the new code.

% Get parent
parent = get(obj,'parent');

% Get the interface.
interface = get(parent,'interface');

% Validating the code (12-character format).
if ~(isvarname(secureCode) &amp;&amp; length(secureCode) &lt;= 12)
    error(['SECAURECODE must be a character string with letters, ',...
           'digits and ' sprintf('\n') 'underscores. The first character ',...
           'in SECURECODE must be a letter.' sprintf('\n') 'The maximum length is 12 characters.']);
end

% Verifying that the device is unsecured before changing the code. 
fprintf(interface,'CALibration:SECure:STATe?')
state = fscanf(interface,'%g');

if (state == 1)
    error(['The device must be unsecured before changing the code.' sprintf('\n'),...
        'Type ''instrhelp(obj, ''securedevice'')'' for more information on how ' sprintf('\n'),...
        'to unsecure the device.']);
    return
end

% Set the secure code to the new code.
fprintf(interface,['CALibration:SECure:CODE ' secureCode])</MCode>
               </Code>
               <Description>SETSECURECDE To change the security code into a new one.

INVOKE(OBJ, 'newcode') to change the current security code to a new one.

Note: You must first unsecure the Fumction Generator using the old security code.
</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>fskmod</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="FSKmod1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Enabled</Name>
               <Location>fskmod</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>FSKey:STATe</ConfigureCommand>
                     <QueryCommand>FSKey:STATe?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="on" Value="1"/>
                     <Enum Name="off" Value="0"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>on</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Disable or enable the FSK mode. 

To ensure proper operation, you should enable AM after you have set up the other modulation parameters. Only one modulation mode can be enabled at a time. When you enable AM the previous modulation is turned off.</Description>
            </Property>
            <Property>
               <Name>Frequency</Name>
               <Location>fskmod</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>FSKey:FREQuency</ConfigureCommand>
                     <QueryCommand>FSKey:FREQuency?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="1.5E7" Min="0.01"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="min" Value="MIN"/>
                     <Enum Name="max" Value="MAX"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>0.01</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Set the FSK "hop" frequency from 10 mHz to 15 MHz.

The default value is 100 Hz.</Description>
            </Property>
            <Property>
               <Name>InternalRate</Name>
               <Location>fskmod</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>FSKey:INTernal:RATE</ConfigureCommand>
                     <QueryCommand>FSKey:INTernal:RATE?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="50000.0" Min="0.01"/>
                  </ConstraintValue>
               </PermissibleType>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="min" Value="MIN"/>
                     <Enum Name="max" Value="MAX"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>10</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Set the rate at which the internal frequency "shifts" between the carrier and hop frequency. 

Select from 10 mHz to 50 kHz, The default is 10 Hz.

The FSK rate is ignored when the external source is selected.
</Description>
            </Property>
            <Property>
               <Name>Source</Name>
               <Location>fskmod</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>FSK:SOURCe</ConfigureCommand>
                     <QueryCommand>FSK:SOURCe?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="internal" Value="INT"/>
                     <Enum Name="external" Value="EXT"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>internal</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Select an internal or external FSK.

The default is INT.

When the internal source is selected, the rate at which output frequency "shifts" between carrier frequency and hop frequency is determined by the FSK rate specified.

When external source is selected, the output frequency is determined by the signal level on the rear-panel FSK terminal. When a low "TTL" is level is present, the carrier frequency is output.

The maximum external FSK rate is 1 MHz.

The external annunciator turns on when the function generator is waiting for external trigger signal.
</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>ledcontrol</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="RP1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>LED1</Name>
               <Location>ledcontrol</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.
%get parent
parent = get(obj,'parent');
%Get interface
interface = get(parent,'interface');
propertyValue=str2num(query(interface,'DIG:PIN? LED1'));</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%get parent
parent = get(obj,'parent');
%Get interface
interface = get(parent,'interface');
% Error checking.
if ~ischar(propertyValue)
    error('property must be a string!');
end
fprintf(interface, ['DIG:PIN LED1,'propertyValue'']);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description/>
            </Property>
            <Property>
               <Name>LED2</Name>
               <Location>ledcontrol</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.
%get parent
parent = get(obj,'parent');
%Get interface
interface = get(parent,'interface');
propertyValue=str2num(query(interface,'DIG:PIN? LED2'));</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%get parent
parent = get(obj,'parent');
%Get interface
interface = get(parent,'interface');
% Error checking.
if ~ischar(propertyValue)
    error('property must be a string!');
end
fprintf(interface, ['DIG:PIN LED2,'propertyValue'']);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description/>
            </Property>
            <Property>
               <Name>LED3</Name>
               <Location>ledcontrol</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.
%get parent
parent = get(obj,'parent');
%Get interface
interface = get(parent,'interface');
propertyValue=str2num(query(interface,'DIG:PIN? LED3'));</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%get parent
parent = get(obj,'parent');
%Get interface
interface = get(parent,'interface');
% Error checking.
if ~ischar(propertyValue)
    error('property must be a string!');
end
fprintf(interface, ['DIG:PIN LED3,'propertyValue'']);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description/>
            </Property>
            <Property>
               <Name>LED4</Name>
               <Location>ledcontrol</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.
%get parent
parent = get(obj,'parent');
%Get interface
interface = get(parent,'interface');
propertyValue=str2num(query(interface,'DIG:PIN? LED4'));</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%get parent
parent = get(obj,'parent');
%Get interface
interface = get(parent,'interface');
% Error checking.
if ~ischar(propertyValue)
    error('property must be a string!');
end
fprintf(interface, ['DIG:PIN LED4,'propertyValue'']);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description/>
            </Property>
            <Property>
               <Name>LED5</Name>
               <Location>ledcontrol</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.
%get parent
parent = get(obj,'parent');
%Get interface
interface = get(parent,'interface');
propertyValue=str2num(query(interface,'DIG:PIN? LED5'));</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%get parent
parent = get(obj,'parent');
%Get interface
interface = get(parent,'interface');
% Error checking.
if ~ischar(propertyValue)
    error('property must be a string!');
end
fprintf(interface, ['DIG:PIN LED5,'propertyValue'']);
propertyName = 1;</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description/>
            </Property>
            <Property>
               <Name>LED6</Name>
               <Location>ledcontrol</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.
%get parent
parent = get(obj,'parent');
%Get interface
interface = get(parent,'interface');
propertyValue=str2num(query(interface,'DIG:PIN? LED6'));</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%get parent
parent = get(obj,'parent');
%Get interface
interface = get(parent,'interface');
% Error checking.
if ~ischar(propertyValue)
    error('property must be a string!');
end
fprintf(interface, ['DIG:PIN LED6,'propertyValue'']);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description/>
            </Property>
            <Property>
               <Name>LED7</Name>
               <Location>ledcontrol</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.
%get parent
parent = get(obj,'parent');
%Get interface
interface = get(parent,'interface');
propertyValue=str2num(query(interface,'DIG:PIN? LED7'));</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%get parent
parent = get(obj,'parent');
%Get interface
interface = get(parent,'interface');
% Error checking.
if ~ischar(propertyValue)
    error('property must be a string!');
end
fprintf(interface, ['DIG:PIN LED7,'propertyValue'']);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description/>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>LED1</Name>
               <Location>ledcontrol</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function LED1(obj, state)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.
%get parent
parent = get(obj,'parent');

%Get interface
interface = get(parent,'interface');



% Error checking.
if ~ischar(state)
    state = int2str(state);
end
if strcmp(state,'ON')
    state = '1';
elseif strcmp(state, 'OFF')
    state = '0';
end

fprintf(interface, ['DIG:PIN LED1,' state '']);</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>LED2</Name>
               <Location>ledcontrol</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function LED2(obj, state)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.
%get parent
parent = get(obj,'parent');

%Get interface
interface = get(parent,'interface');



% Error checking.
if ~ischar(state)
    state = int2str(state);
end
if strcmp(state,'ON')
    state = '1';
elseif strcmp(state, 'OFF')
    state = '0';
end

fprintf(interface, ['DIG:PIN LED2,' state '']);</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>LED3</Name>
               <Location>ledcontrol</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function LED3(obj, state)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.
%get parent
parent = get(obj,'parent');

%Get interface
interface = get(parent,'interface');



% Error checking.
if ~ischar(state)
    state = int2str(state);
end
if strcmp(state,'ON')
    state = '1';
elseif strcmp(state, 'OFF')
    state = '0';
end

fprintf(interface, ['DIG:PIN LED3,' state '']);</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>LED4</Name>
               <Location>ledcontrol</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function LED4(obj, state)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.
%get parent
parent = get(obj,'parent');

%Get interface
interface = get(parent,'interface');



% Error checking.
if ~ischar(state)
    state = int2str(state);
end
if strcmp(state,'ON')
    state = '1';
elseif strcmp(state, 'OFF')
    state = '0';
end

fprintf(interface, ['DIG:PIN LED4,' state '']);</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>LED5</Name>
               <Location>ledcontrol</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function LED5(obj, state)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.
%get parent
parent = get(obj,'parent');

%Get interface
interface = get(parent,'interface');



% Error checking.
if ~ischar(state)
    state = int2str(state);
end
if strcmp(state,'ON')
    state = '1';
elseif strcmp(state, 'OFF')
    state = '0';
end

fprintf(interface, ['DIG:PIN LED5,' state '']);</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>LED6</Name>
               <Location>ledcontrol</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function LED6(obj, state)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.
%get parent
parent = get(obj,'parent');

%Get interface
interface = get(parent,'interface');



% Error checking.
if ~ischar(state)
    state = int2str(state);
end
if strcmp(state,'ON')
    state = '1';
elseif strcmp(state, 'OFF')
    state = '0';
end

fprintf(interface, ['DIG:PIN LED6,' state '']);</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>LED7</Name>
               <Location>ledcontrol</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function LED7(obj, state)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.
%get parent
parent = get(obj,'parent');

%Get interface
interface = get(parent,'interface');



% Error checking.
if ~ischar(state)
    state = int2str(state);
end
if strcmp(state,'ON')
    state = '1';
elseif strcmp(state, 'OFF')
    state = '0';
end

fprintf(interface, ['DIG:PIN LED7,' state '']);</MCode>
               </Code>
               <Description/>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>system</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="System1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>ByteOrder</Name>
               <Location>system</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand>Format:BOrder</ConfigureCommand>
                     <QueryCommand>Format:BOrder?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="normal" Value="NORM"/>
                     <Enum Name="swapped" Value="SWAP"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>normal</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Select the byte order for binary transfers in the block mode using the DATA:DAC command.</Description>
            </Property>
            <Property>
               <Name>Version</Name>
               <Location>system</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>InstrumentCommand</Type>
               <Code>
                  <Commands>
                     <ConfigureCommand/>
                     <QueryCommand>System:VERsion?</QueryCommand>
                  </Commands>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Query the function generator to determine the present SCPI version.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>ResetGenerator</Name>
               <Location>system</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ResetGenerator(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.
%get parent
parent = get(obj,'parent');

%Get interface
interface = get(parent,'interface');

fprintf(interface, ['GEN:RST ']);</MCode>
               </Code>
               <Description/>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>trigger</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Trigger1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>triggerch1</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="TriggerCH11" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>source</Name>
               <Location>triggerch1</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
parent = get(obj,'parent');

%Get interface
interface = get(parent,'interface');

% Error checking.
if ~ischar(dutycycle)
    error('state must be a string.');
end

fprintf(interface, ['OUTPUT1:DCYC' propertyValue '']);

propertyName = 1;</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description/>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>ImmediateTgigger</Name>
               <Location>triggerch1</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ImmediateTgigger(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.
parent = get(obj,'parent');

%Get interface
interface = get(parent,'interface');

fprintf(interface, ['OUTPUT1:TRIG:IMM']);</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>Source</Name>
               <Location>triggerch1</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Source(obj,source)



parent = get(obj,'parent');

interface= get(parent,'interface');

if ~ischar(source)
    error('input must be a string');
end

fprintf(interface, ['SOUR1:TRIG:SOUR ' source '']);

</MCode>
               </Code>
               <Description/>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>triggerch2</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="TriggerCH21" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>ImmediateTrigger</Name>
               <Location>triggerch2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ImmediateTgigger(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.
parent = get(obj,'parent');

%Get interface
interface = get(parent,'interface');

fprintf(interface, ['OUTPUT2:TRIG:IMM']);</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>Source</Name>
               <Location>triggerch2</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Source(obj,source)

parent = get(obj,'parent');

interface= get(parent,'interface');

if ~ischar(source)
    error('input must be a string');
end

fprintf(interface, ['SOUR2:TRIG:SOUR ' source '']);

</MCode>
               </Code>
               <Description/>
            </Method>
         </MethodInfo>
      </Group>
   </GroupInfo>
</MATLABInstrumentDriver>